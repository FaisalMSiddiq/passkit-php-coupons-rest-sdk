<?php
/**
 * SingleUseCouponsCoupon
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsCoupon Class Doc Comment
 *
 * @category Class
 * @description Holds the details &amp; state of a unique individual coupon instance (i.e. a pass).
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsCoupon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsCoupon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'externalId' => 'string',
'offerId' => 'string',
'campaignId' => 'string',
'person' => '\PkIo\Model\IoPerson',
'metaData' => 'map[string,string]',
'sku' => 'string',
'optOut' => 'bool',
'status' => '\PkIo\Model\SingleUseCouponsCouponStatus',
'expiryDate' => '\DateTime',
'redemptionDetails' => '\PkIo\Model\SingleUseCouponsRedemptionDetails',
'passOverrides' => '\PkIo\Model\IoPassOverrides',
'passMetaData' => '\PkIo\Model\IoMetadata',
'created' => '\DateTime',
'updated' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'externalId' => null,
'offerId' => null,
'campaignId' => null,
'person' => null,
'metaData' => null,
'sku' => null,
'optOut' => 'boolean',
'status' => null,
'expiryDate' => 'date-time',
'redemptionDetails' => null,
'passOverrides' => null,
'passMetaData' => null,
'created' => 'date-time',
'updated' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'externalId' => 'externalId',
'offerId' => 'offerId',
'campaignId' => 'campaignId',
'person' => 'person',
'metaData' => 'metaData',
'sku' => 'sku',
'optOut' => 'optOut',
'status' => 'status',
'expiryDate' => 'expiryDate',
'redemptionDetails' => 'redemptionDetails',
'passOverrides' => 'passOverrides',
'passMetaData' => 'passMetaData',
'created' => 'created',
'updated' => 'updated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'externalId' => 'setExternalId',
'offerId' => 'setOfferId',
'campaignId' => 'setCampaignId',
'person' => 'setPerson',
'metaData' => 'setMetaData',
'sku' => 'setSku',
'optOut' => 'setOptOut',
'status' => 'setStatus',
'expiryDate' => 'setExpiryDate',
'redemptionDetails' => 'setRedemptionDetails',
'passOverrides' => 'setPassOverrides',
'passMetaData' => 'setPassMetaData',
'created' => 'setCreated',
'updated' => 'setUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'externalId' => 'getExternalId',
'offerId' => 'getOfferId',
'campaignId' => 'getCampaignId',
'person' => 'getPerson',
'metaData' => 'getMetaData',
'sku' => 'getSku',
'optOut' => 'getOptOut',
'status' => 'getStatus',
'expiryDate' => 'getExpiryDate',
'redemptionDetails' => 'getRedemptionDetails',
'passOverrides' => 'getPassOverrides',
'passMetaData' => 'getPassMetaData',
'created' => 'getCreated',
'updated' => 'getUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['externalId'] = isset($data['externalId']) ? $data['externalId'] : null;
        $this->container['offerId'] = isset($data['offerId']) ? $data['offerId'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['metaData'] = isset($data['metaData']) ? $data['metaData'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['optOut'] = isset($data['optOut']) ? $data['optOut'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['expiryDate'] = isset($data['expiryDate']) ? $data['expiryDate'] : null;
        $this->container['redemptionDetails'] = isset($data['redemptionDetails']) ? $data['redemptionDetails'] : null;
        $this->container['passOverrides'] = isset($data['passOverrides']) ? $data['passOverrides'] : null;
        $this->container['passMetaData'] = isset($data['passMetaData']) ? $data['passMetaData'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offerId'] === null) {
            $invalidProperties[] = "'offerId' can't be null";
        }
        if ($this->container['campaignId'] === null) {
            $invalidProperties[] = "'campaignId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id PassKit generated coupon id (22 characters).
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets externalId
     *
     * @return string
     */
    public function getExternalId()
    {
        return $this->container['externalId'];
    }

    /**
     * Sets externalId
     *
     * @param string $externalId This can be used to set the 'external' ID of the coupon (i.e. the unique coupon code as it's being used in your system). If provided then this can be used to query & update coupon. This field will be treated as unique within the campaign, and cannot be updated at a later stage.
     *
     * @return $this
     */
    public function setExternalId($externalId)
    {
        $this->container['externalId'] = $externalId;

        return $this;
    }

    /**
     * Gets offerId
     *
     * @return string
     */
    public function getOfferId()
    {
        return $this->container['offerId'];
    }

    /**
     * Sets offerId
     *
     * @param string $offerId The coupon offer id that the coupon belongs to.
     *
     * @return $this
     */
    public function setOfferId($offerId)
    {
        $this->container['offerId'] = $offerId;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param string $campaignId The coupon campaign id the the coupon belongs to.
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \PkIo\Model\IoPerson
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \PkIo\Model\IoPerson $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets metaData
     *
     * @return map[string,string]
     */
    public function getMetaData()
    {
        return $this->container['metaData'];
    }

    /**
     * Sets metaData
     *
     * @param map[string,string] $metaData Any other meta fields for the coupon that are not covered in the protocol (i.e. you might want to captures sign-up location, or favourite perfume, for segmenting later on).
     *
     * @return $this
     */
    public function setMetaData($metaData)
    {
        $this->container['metaData'] = $metaData;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku Optional SKU. Can be used in the barcode by setting ${coupon.sku} in the template barcode settings.
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets optOut
     *
     * @return bool
     */
    public function getOptOut()
    {
        return $this->container['optOut'];
    }

    /**
     * Sets optOut
     *
     * @param bool $optOut Indicates if the user of the coupon opted out to receive marketing promotions (defaults to false).
     *
     * @return $this
     */
    public function setOptOut($optOut)
    {
        $this->container['optOut'] = $optOut;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \PkIo\Model\SingleUseCouponsCouponStatus
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \PkIo\Model\SingleUseCouponsCouponStatus $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets expiryDate
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiryDate'];
    }

    /**
     * Sets expiryDate
     *
     * @param \DateTime $expiryDate Optional field to set when the coupon expires. When the expiry date hits, it will automatically gray out the barcode. Only applicable if the template for the offer is set to EXPIRE_ON_VARIABLE_DATE_TIME.
     *
     * @return $this
     */
    public function setExpiryDate($expiryDate)
    {
        $this->container['expiryDate'] = $expiryDate;

        return $this;
    }

    /**
     * Gets redemptionDetails
     *
     * @return \PkIo\Model\SingleUseCouponsRedemptionDetails
     */
    public function getRedemptionDetails()
    {
        return $this->container['redemptionDetails'];
    }

    /**
     * Sets redemptionDetails
     *
     * @param \PkIo\Model\SingleUseCouponsRedemptionDetails $redemptionDetails redemptionDetails
     *
     * @return $this
     */
    public function setRedemptionDetails($redemptionDetails)
    {
        $this->container['redemptionDetails'] = $redemptionDetails;

        return $this;
    }

    /**
     * Gets passOverrides
     *
     * @return \PkIo\Model\IoPassOverrides
     */
    public function getPassOverrides()
    {
        return $this->container['passOverrides'];
    }

    /**
     * Sets passOverrides
     *
     * @param \PkIo\Model\IoPassOverrides $passOverrides passOverrides
     *
     * @return $this
     */
    public function setPassOverrides($passOverrides)
    {
        $this->container['passOverrides'] = $passOverrides;

        return $this;
    }

    /**
     * Gets passMetaData
     *
     * @return \PkIo\Model\IoMetadata
     */
    public function getPassMetaData()
    {
        return $this->container['passMetaData'];
    }

    /**
     * Sets passMetaData
     *
     * @param \PkIo\Model\IoMetadata $passMetaData passMetaData
     *
     * @return $this
     */
    public function setPassMetaData($passMetaData)
    {
        $this->container['passMetaData'] = $passMetaData;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date the coupon was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The date the coupon was last updated.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
