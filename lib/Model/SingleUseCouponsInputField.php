<?php
/**
 * SingleUseCouponsInputField
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsInputField Class Doc Comment
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsInputField implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsInputField';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'label' => 'string',
'localizedLabel' => '\PkIo\Model\IoLocalizedString',
'helperText' => 'string',
'localizedHelperText' => '\PkIo\Model\IoLocalizedString',
'errorMessage' => 'string',
'localizedErrorMessage' => '\PkIo\Model\IoLocalizedString',
'defaultValue' => 'string',
'localizedDefaultValue' => '\PkIo\Model\IoLocalizedString',
'placeholder' => 'string',
'localizedPlaceholder' => '\PkIo\Model\IoLocalizedString',
'validation' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'label' => null,
'localizedLabel' => null,
'helperText' => null,
'localizedHelperText' => null,
'errorMessage' => null,
'localizedErrorMessage' => null,
'defaultValue' => null,
'localizedDefaultValue' => null,
'placeholder' => null,
'localizedPlaceholder' => null,
'validation' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'label' => 'label',
'localizedLabel' => 'localizedLabel',
'helperText' => 'helperText',
'localizedHelperText' => 'localizedHelperText',
'errorMessage' => 'errorMessage',
'localizedErrorMessage' => 'localizedErrorMessage',
'defaultValue' => 'defaultValue',
'localizedDefaultValue' => 'localizedDefaultValue',
'placeholder' => 'placeholder',
'localizedPlaceholder' => 'localizedPlaceholder',
'validation' => 'validation'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'label' => 'setLabel',
'localizedLabel' => 'setLocalizedLabel',
'helperText' => 'setHelperText',
'localizedHelperText' => 'setLocalizedHelperText',
'errorMessage' => 'setErrorMessage',
'localizedErrorMessage' => 'setLocalizedErrorMessage',
'defaultValue' => 'setDefaultValue',
'localizedDefaultValue' => 'setLocalizedDefaultValue',
'placeholder' => 'setPlaceholder',
'localizedPlaceholder' => 'setLocalizedPlaceholder',
'validation' => 'setValidation'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'label' => 'getLabel',
'localizedLabel' => 'getLocalizedLabel',
'helperText' => 'getHelperText',
'localizedHelperText' => 'getLocalizedHelperText',
'errorMessage' => 'getErrorMessage',
'localizedErrorMessage' => 'getLocalizedErrorMessage',
'defaultValue' => 'getDefaultValue',
'localizedDefaultValue' => 'getLocalizedDefaultValue',
'placeholder' => 'getPlaceholder',
'localizedPlaceholder' => 'getLocalizedPlaceholder',
'validation' => 'getValidation'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['label'] = isset($data['label']) ? $data['label'] : null;
        $this->container['localizedLabel'] = isset($data['localizedLabel']) ? $data['localizedLabel'] : null;
        $this->container['helperText'] = isset($data['helperText']) ? $data['helperText'] : null;
        $this->container['localizedHelperText'] = isset($data['localizedHelperText']) ? $data['localizedHelperText'] : null;
        $this->container['errorMessage'] = isset($data['errorMessage']) ? $data['errorMessage'] : null;
        $this->container['localizedErrorMessage'] = isset($data['localizedErrorMessage']) ? $data['localizedErrorMessage'] : null;
        $this->container['defaultValue'] = isset($data['defaultValue']) ? $data['defaultValue'] : null;
        $this->container['localizedDefaultValue'] = isset($data['localizedDefaultValue']) ? $data['localizedDefaultValue'] : null;
        $this->container['placeholder'] = isset($data['placeholder']) ? $data['placeholder'] : null;
        $this->container['localizedPlaceholder'] = isset($data['localizedPlaceholder']) ? $data['localizedPlaceholder'] : null;
        $this->container['validation'] = isset($data['validation']) ? $data['validation'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label The label of input field.
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets localizedLabel
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedLabel()
    {
        return $this->container['localizedLabel'];
    }

    /**
     * Sets localizedLabel
     *
     * @param \PkIo\Model\IoLocalizedString $localizedLabel localizedLabel
     *
     * @return $this
     */
    public function setLocalizedLabel($localizedLabel)
    {
        $this->container['localizedLabel'] = $localizedLabel;

        return $this;
    }

    /**
     * Gets helperText
     *
     * @return string
     */
    public function getHelperText()
    {
        return $this->container['helperText'];
    }

    /**
     * Sets helperText
     *
     * @param string $helperText Help text shown below the input field.
     *
     * @return $this
     */
    public function setHelperText($helperText)
    {
        $this->container['helperText'] = $helperText;

        return $this;
    }

    /**
     * Gets localizedHelperText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedHelperText()
    {
        return $this->container['localizedHelperText'];
    }

    /**
     * Sets localizedHelperText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedHelperText localizedHelperText
     *
     * @return $this
     */
    public function setLocalizedHelperText($localizedHelperText)
    {
        $this->container['localizedHelperText'] = $localizedHelperText;

        return $this;
    }

    /**
     * Gets errorMessage
     *
     * @return string
     */
    public function getErrorMessage()
    {
        return $this->container['errorMessage'];
    }

    /**
     * Sets errorMessage
     *
     * @param string $errorMessage Optional message that is displayed if the user provides an invalid input value.
     *
     * @return $this
     */
    public function setErrorMessage($errorMessage)
    {
        $this->container['errorMessage'] = $errorMessage;

        return $this;
    }

    /**
     * Gets localizedErrorMessage
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedErrorMessage()
    {
        return $this->container['localizedErrorMessage'];
    }

    /**
     * Sets localizedErrorMessage
     *
     * @param \PkIo\Model\IoLocalizedString $localizedErrorMessage localizedErrorMessage
     *
     * @return $this
     */
    public function setLocalizedErrorMessage($localizedErrorMessage)
    {
        $this->container['localizedErrorMessage'] = $localizedErrorMessage;

        return $this;
    }

    /**
     * Gets defaultValue
     *
     * @return string
     */
    public function getDefaultValue()
    {
        return $this->container['defaultValue'];
    }

    /**
     * Sets defaultValue
     *
     * @param string $defaultValue Default input value.
     *
     * @return $this
     */
    public function setDefaultValue($defaultValue)
    {
        $this->container['defaultValue'] = $defaultValue;

        return $this;
    }

    /**
     * Gets localizedDefaultValue
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedDefaultValue()
    {
        return $this->container['localizedDefaultValue'];
    }

    /**
     * Sets localizedDefaultValue
     *
     * @param \PkIo\Model\IoLocalizedString $localizedDefaultValue localizedDefaultValue
     *
     * @return $this
     */
    public function setLocalizedDefaultValue($localizedDefaultValue)
    {
        $this->container['localizedDefaultValue'] = $localizedDefaultValue;

        return $this;
    }

    /**
     * Gets placeholder
     *
     * @return string
     */
    public function getPlaceholder()
    {
        return $this->container['placeholder'];
    }

    /**
     * Sets placeholder
     *
     * @param string $placeholder Placeholder text for the input field.
     *
     * @return $this
     */
    public function setPlaceholder($placeholder)
    {
        $this->container['placeholder'] = $placeholder;

        return $this;
    }

    /**
     * Gets localizedPlaceholder
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedPlaceholder()
    {
        return $this->container['localizedPlaceholder'];
    }

    /**
     * Sets localizedPlaceholder
     *
     * @param \PkIo\Model\IoLocalizedString $localizedPlaceholder localizedPlaceholder
     *
     * @return $this
     */
    public function setLocalizedPlaceholder($localizedPlaceholder)
    {
        $this->container['localizedPlaceholder'] = $localizedPlaceholder;

        return $this;
    }

    /**
     * Gets validation
     *
     * @return string
     */
    public function getValidation()
    {
        return $this->container['validation'];
    }

    /**
     * Sets validation
     *
     * @param string $validation A regex which allows you to set custom validation rules for the input value.
     *
     * @return $this
     */
    public function setValidation($validation)
    {
        $this->container['validation'] = $validation;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
