<?php
/**
 * SingleUseCouponsStandardPassKitHostedPage
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsStandardPassKitHostedPage Class Doc Comment
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsStandardPassKitHostedPage implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsStandardPassKitHostedPage';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'title' => 'string',
'localizedTitle' => '\PkIo\Model\IoLocalizedString',
'redemptionInstructions' => 'string',
'localizedRedemptionInstructions' => '\PkIo\Model\IoLocalizedString',
'imageIds' => '\PkIo\Model\IoImageIds',
'images' => '\PkIo\Model\IoImageData',
'footerText' => 'string',
'localizedFooterText' => '\PkIo\Model\IoLocalizedString',
'responseTexts' => '\PkIo\Model\SingleUseCouponsResponseTexts',
'hideRedeemedDateTime' => 'bool',
'callToActionButton' => '\PkIo\Model\SingleUseCouponsCallToActionButton',
'cssOverrides' => 'string'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'title' => null,
'localizedTitle' => null,
'redemptionInstructions' => null,
'localizedRedemptionInstructions' => null,
'imageIds' => null,
'images' => null,
'footerText' => null,
'localizedFooterText' => null,
'responseTexts' => null,
'hideRedeemedDateTime' => 'boolean',
'callToActionButton' => null,
'cssOverrides' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'title' => 'title',
'localizedTitle' => 'localizedTitle',
'redemptionInstructions' => 'redemptionInstructions',
'localizedRedemptionInstructions' => 'localizedRedemptionInstructions',
'imageIds' => 'imageIds',
'images' => 'images',
'footerText' => 'footerText',
'localizedFooterText' => 'localizedFooterText',
'responseTexts' => 'responseTexts',
'hideRedeemedDateTime' => 'hideRedeemedDateTime',
'callToActionButton' => 'callToActionButton',
'cssOverrides' => 'cssOverrides'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'title' => 'setTitle',
'localizedTitle' => 'setLocalizedTitle',
'redemptionInstructions' => 'setRedemptionInstructions',
'localizedRedemptionInstructions' => 'setLocalizedRedemptionInstructions',
'imageIds' => 'setImageIds',
'images' => 'setImages',
'footerText' => 'setFooterText',
'localizedFooterText' => 'setLocalizedFooterText',
'responseTexts' => 'setResponseTexts',
'hideRedeemedDateTime' => 'setHideRedeemedDateTime',
'callToActionButton' => 'setCallToActionButton',
'cssOverrides' => 'setCssOverrides'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'title' => 'getTitle',
'localizedTitle' => 'getLocalizedTitle',
'redemptionInstructions' => 'getRedemptionInstructions',
'localizedRedemptionInstructions' => 'getLocalizedRedemptionInstructions',
'imageIds' => 'getImageIds',
'images' => 'getImages',
'footerText' => 'getFooterText',
'localizedFooterText' => 'getLocalizedFooterText',
'responseTexts' => 'getResponseTexts',
'hideRedeemedDateTime' => 'getHideRedeemedDateTime',
'callToActionButton' => 'getCallToActionButton',
'cssOverrides' => 'getCssOverrides'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['localizedTitle'] = isset($data['localizedTitle']) ? $data['localizedTitle'] : null;
        $this->container['redemptionInstructions'] = isset($data['redemptionInstructions']) ? $data['redemptionInstructions'] : null;
        $this->container['localizedRedemptionInstructions'] = isset($data['localizedRedemptionInstructions']) ? $data['localizedRedemptionInstructions'] : null;
        $this->container['imageIds'] = isset($data['imageIds']) ? $data['imageIds'] : null;
        $this->container['images'] = isset($data['images']) ? $data['images'] : null;
        $this->container['footerText'] = isset($data['footerText']) ? $data['footerText'] : null;
        $this->container['localizedFooterText'] = isset($data['localizedFooterText']) ? $data['localizedFooterText'] : null;
        $this->container['responseTexts'] = isset($data['responseTexts']) ? $data['responseTexts'] : null;
        $this->container['hideRedeemedDateTime'] = isset($data['hideRedeemedDateTime']) ? $data['hideRedeemedDateTime'] : null;
        $this->container['callToActionButton'] = isset($data['callToActionButton']) ? $data['callToActionButton'] : null;
        $this->container['cssOverrides'] = isset($data['cssOverrides']) ? $data['cssOverrides'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Title shown on the redemption page browser tab. If not set, offer title will be shown.
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets localizedTitle
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedTitle()
    {
        return $this->container['localizedTitle'];
    }

    /**
     * Sets localizedTitle
     *
     * @param \PkIo\Model\IoLocalizedString $localizedTitle localizedTitle
     *
     * @return $this
     */
    public function setLocalizedTitle($localizedTitle)
    {
        $this->container['localizedTitle'] = $localizedTitle;

        return $this;
    }

    /**
     * Gets redemptionInstructions
     *
     * @return string
     */
    public function getRedemptionInstructions()
    {
        return $this->container['redemptionInstructions'];
    }

    /**
     * Sets redemptionInstructions
     *
     * @param string $redemptionInstructions Redemption instructions, show underneath the redemption banner image.
     *
     * @return $this
     */
    public function setRedemptionInstructions($redemptionInstructions)
    {
        $this->container['redemptionInstructions'] = $redemptionInstructions;

        return $this;
    }

    /**
     * Gets localizedRedemptionInstructions
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedRedemptionInstructions()
    {
        return $this->container['localizedRedemptionInstructions'];
    }

    /**
     * Sets localizedRedemptionInstructions
     *
     * @param \PkIo\Model\IoLocalizedString $localizedRedemptionInstructions localizedRedemptionInstructions
     *
     * @return $this
     */
    public function setLocalizedRedemptionInstructions($localizedRedemptionInstructions)
    {
        $this->container['localizedRedemptionInstructions'] = $localizedRedemptionInstructions;

        return $this;
    }

    /**
     * Gets imageIds
     *
     * @return \PkIo\Model\IoImageIds
     */
    public function getImageIds()
    {
        return $this->container['imageIds'];
    }

    /**
     * Sets imageIds
     *
     * @param \PkIo\Model\IoImageIds $imageIds imageIds
     *
     * @return $this
     */
    public function setImageIds($imageIds)
    {
        $this->container['imageIds'] = $imageIds;

        return $this;
    }

    /**
     * Gets images
     *
     * @return \PkIo\Model\IoImageData
     */
    public function getImages()
    {
        return $this->container['images'];
    }

    /**
     * Sets images
     *
     * @param \PkIo\Model\IoImageData $images images
     *
     * @return $this
     */
    public function setImages($images)
    {
        $this->container['images'] = $images;

        return $this;
    }

    /**
     * Gets footerText
     *
     * @return string
     */
    public function getFooterText()
    {
        return $this->container['footerText'];
    }

    /**
     * Sets footerText
     *
     * @param string $footerText Text shown at the footer of the page, underneath the redemption code / redemption code input.
     *
     * @return $this
     */
    public function setFooterText($footerText)
    {
        $this->container['footerText'] = $footerText;

        return $this;
    }

    /**
     * Gets localizedFooterText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedFooterText()
    {
        return $this->container['localizedFooterText'];
    }

    /**
     * Sets localizedFooterText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedFooterText localizedFooterText
     *
     * @return $this
     */
    public function setLocalizedFooterText($localizedFooterText)
    {
        $this->container['localizedFooterText'] = $localizedFooterText;

        return $this;
    }

    /**
     * Gets responseTexts
     *
     * @return \PkIo\Model\SingleUseCouponsResponseTexts
     */
    public function getResponseTexts()
    {
        return $this->container['responseTexts'];
    }

    /**
     * Sets responseTexts
     *
     * @param \PkIo\Model\SingleUseCouponsResponseTexts $responseTexts responseTexts
     *
     * @return $this
     */
    public function setResponseTexts($responseTexts)
    {
        $this->container['responseTexts'] = $responseTexts;

        return $this;
    }

    /**
     * Gets hideRedeemedDateTime
     *
     * @return bool
     */
    public function getHideRedeemedDateTime()
    {
        return $this->container['hideRedeemedDateTime'];
    }

    /**
     * Sets hideRedeemedDateTime
     *
     * @param bool $hideRedeemedDateTime Date time showed with couponAlreadyRedeemedText. Date time is localized to browser preferred language.
     *
     * @return $this
     */
    public function setHideRedeemedDateTime($hideRedeemedDateTime)
    {
        $this->container['hideRedeemedDateTime'] = $hideRedeemedDateTime;

        return $this;
    }

    /**
     * Gets callToActionButton
     *
     * @return \PkIo\Model\SingleUseCouponsCallToActionButton
     */
    public function getCallToActionButton()
    {
        return $this->container['callToActionButton'];
    }

    /**
     * Sets callToActionButton
     *
     * @param \PkIo\Model\SingleUseCouponsCallToActionButton $callToActionButton callToActionButton
     *
     * @return $this
     */
    public function setCallToActionButton($callToActionButton)
    {
        $this->container['callToActionButton'] = $callToActionButton;

        return $this;
    }

    /**
     * Gets cssOverrides
     *
     * @return string
     */
    public function getCssOverrides()
    {
        return $this->container['cssOverrides'];
    }

    /**
     * Sets cssOverrides
     *
     * @param string $cssOverrides Optional CSS overrides to ensure the page aligns with your brand guidelines.
     *
     * @return $this
     */
    public function setCssOverrides($cssOverrides)
    {
        $this->container['cssOverrides'] = $cssOverrides;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
