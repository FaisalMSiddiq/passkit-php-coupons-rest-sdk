<?php
/**
 * SingleUseCouponsCallToActionButton
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsCallToActionButton Class Doc Comment
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsCallToActionButton implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsCallToActionButton';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'hideCallToActionButton' => 'bool',
'buttonText' => 'string',
'localizedButtonText' => '\PkIo\Model\IoLocalizedString',
'link' => 'string',
'localizedLink' => '\PkIo\Model\IoLocalizedString'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'hideCallToActionButton' => 'boolean',
'buttonText' => null,
'localizedButtonText' => null,
'link' => null,
'localizedLink' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'hideCallToActionButton' => 'hideCallToActionButton',
'buttonText' => 'buttonText',
'localizedButtonText' => 'localizedButtonText',
'link' => 'link',
'localizedLink' => 'localizedLink'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'hideCallToActionButton' => 'setHideCallToActionButton',
'buttonText' => 'setButtonText',
'localizedButtonText' => 'setLocalizedButtonText',
'link' => 'setLink',
'localizedLink' => 'setLocalizedLink'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'hideCallToActionButton' => 'getHideCallToActionButton',
'buttonText' => 'getButtonText',
'localizedButtonText' => 'getLocalizedButtonText',
'link' => 'getLink',
'localizedLink' => 'getLocalizedLink'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['hideCallToActionButton'] = isset($data['hideCallToActionButton']) ? $data['hideCallToActionButton'] : null;
        $this->container['buttonText'] = isset($data['buttonText']) ? $data['buttonText'] : null;
        $this->container['localizedButtonText'] = isset($data['localizedButtonText']) ? $data['localizedButtonText'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['localizedLink'] = isset($data['localizedLink']) ? $data['localizedLink'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets hideCallToActionButton
     *
     * @return bool
     */
    public function getHideCallToActionButton()
    {
        return $this->container['hideCallToActionButton'];
    }

    /**
     * Sets hideCallToActionButton
     *
     * @param bool $hideCallToActionButton Set true to hide button.
     *
     * @return $this
     */
    public function setHideCallToActionButton($hideCallToActionButton)
    {
        $this->container['hideCallToActionButton'] = $hideCallToActionButton;

        return $this;
    }

    /**
     * Gets buttonText
     *
     * @return string
     */
    public function getButtonText()
    {
        return $this->container['buttonText'];
    }

    /**
     * Sets buttonText
     *
     * @param string $buttonText Call-to-action text shown on the button.
     *
     * @return $this
     */
    public function setButtonText($buttonText)
    {
        $this->container['buttonText'] = $buttonText;

        return $this;
    }

    /**
     * Gets localizedButtonText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedButtonText()
    {
        return $this->container['localizedButtonText'];
    }

    /**
     * Sets localizedButtonText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedButtonText localizedButtonText
     *
     * @return $this
     */
    public function setLocalizedButtonText($localizedButtonText)
    {
        $this->container['localizedButtonText'] = $localizedButtonText;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link Link that the button will open.
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets localizedLink
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedLink()
    {
        return $this->container['localizedLink'];
    }

    /**
     * Sets localizedLink
     *
     * @param \PkIo\Model\IoLocalizedString $localizedLink localizedLink
     *
     * @return $this
     */
    public function setLocalizedLink($localizedLink)
    {
        $this->container['localizedLink'] = $localizedLink;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
