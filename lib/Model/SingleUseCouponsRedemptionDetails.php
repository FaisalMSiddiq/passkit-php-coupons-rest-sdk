<?php
/**
 * SingleUseCouponsRedemptionDetails
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsRedemptionDetails Class Doc Comment
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsRedemptionDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsRedemptionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'redemptionDate' => '\DateTime',
'redemptionCode' => 'string',
'lat' => 'double',
'lon' => 'double',
'alt' => 'int',
'redemptionSource' => 'string',
'redemptionReference' => 'string',
'transactionReference' => 'string',
'transactionAmount' => 'double'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'redemptionDate' => 'date-time',
'redemptionCode' => null,
'lat' => 'double',
'lon' => 'double',
'alt' => 'int32',
'redemptionSource' => null,
'redemptionReference' => null,
'transactionReference' => null,
'transactionAmount' => 'double'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redemptionDate' => 'redemptionDate',
'redemptionCode' => 'redemptionCode',
'lat' => 'lat',
'lon' => 'lon',
'alt' => 'alt',
'redemptionSource' => 'redemptionSource',
'redemptionReference' => 'redemptionReference',
'transactionReference' => 'transactionReference',
'transactionAmount' => 'transactionAmount'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redemptionDate' => 'setRedemptionDate',
'redemptionCode' => 'setRedemptionCode',
'lat' => 'setLat',
'lon' => 'setLon',
'alt' => 'setAlt',
'redemptionSource' => 'setRedemptionSource',
'redemptionReference' => 'setRedemptionReference',
'transactionReference' => 'setTransactionReference',
'transactionAmount' => 'setTransactionAmount'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redemptionDate' => 'getRedemptionDate',
'redemptionCode' => 'getRedemptionCode',
'lat' => 'getLat',
'lon' => 'getLon',
'alt' => 'getAlt',
'redemptionSource' => 'getRedemptionSource',
'redemptionReference' => 'getRedemptionReference',
'transactionReference' => 'getTransactionReference',
'transactionAmount' => 'getTransactionAmount'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['redemptionDate'] = isset($data['redemptionDate']) ? $data['redemptionDate'] : null;
        $this->container['redemptionCode'] = isset($data['redemptionCode']) ? $data['redemptionCode'] : null;
        $this->container['lat'] = isset($data['lat']) ? $data['lat'] : null;
        $this->container['lon'] = isset($data['lon']) ? $data['lon'] : null;
        $this->container['alt'] = isset($data['alt']) ? $data['alt'] : null;
        $this->container['redemptionSource'] = isset($data['redemptionSource']) ? $data['redemptionSource'] : null;
        $this->container['redemptionReference'] = isset($data['redemptionReference']) ? $data['redemptionReference'] : null;
        $this->container['transactionReference'] = isset($data['transactionReference']) ? $data['transactionReference'] : null;
        $this->container['transactionAmount'] = isset($data['transactionAmount']) ? $data['transactionAmount'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redemptionDate
     *
     * @return \DateTime
     */
    public function getRedemptionDate()
    {
        return $this->container['redemptionDate'];
    }

    /**
     * Sets redemptionDate
     *
     * @param \DateTime $redemptionDate The date the coupon was redeemed (set by the system when the redeem endpoint is called).
     *
     * @return $this
     */
    public function setRedemptionDate($redemptionDate)
    {
        $this->container['redemptionDate'] = $redemptionDate;

        return $this;
    }

    /**
     * Gets redemptionCode
     *
     * @return string
     */
    public function getRedemptionCode()
    {
        return $this->container['redemptionCode'];
    }

    /**
     * Sets redemptionCode
     *
     * @param string $redemptionCode Optional field that contains the redemption code provided on redeem (either the fixed one if set, or user provided).
     *
     * @return $this
     */
    public function setRedemptionCode($redemptionCode)
    {
        $this->container['redemptionCode'] = $redemptionCode;

        return $this;
    }

    /**
     * Gets lat
     *
     * @return double
     */
    public function getLat()
    {
        return $this->container['lat'];
    }

    /**
     * Sets lat
     *
     * @param double $lat Option redemption GPS lat, lon &  alt.
     *
     * @return $this
     */
    public function setLat($lat)
    {
        $this->container['lat'] = $lat;

        return $this;
    }

    /**
     * Gets lon
     *
     * @return double
     */
    public function getLon()
    {
        return $this->container['lon'];
    }

    /**
     * Sets lon
     *
     * @param double $lon Longitude.
     *
     * @return $this
     */
    public function setLon($lon)
    {
        $this->container['lon'] = $lon;

        return $this;
    }

    /**
     * Gets alt
     *
     * @return int
     */
    public function getAlt()
    {
        return $this->container['alt'];
    }

    /**
     * Sets alt
     *
     * @param int $alt Altitude in metres.
     *
     * @return $this
     */
    public function setAlt($alt)
    {
        $this->container['alt'] = $alt;

        return $this;
    }

    /**
     * Gets redemptionSource
     *
     * @return string
     */
    public function getRedemptionSource()
    {
        return $this->container['redemptionSource'];
    }

    /**
     * Sets redemptionSource
     *
     * @param string $redemptionSource Optional redemption user agent, can be used in case where a Merchant uses the PassKit scanning solution combined with their own POS redemption and wants to differentiate the source of redemption.
     *
     * @return $this
     */
    public function setRedemptionSource($redemptionSource)
    {
        $this->container['redemptionSource'] = $redemptionSource;

        return $this;
    }

    /**
     * Gets redemptionReference
     *
     * @return string
     */
    public function getRedemptionReference()
    {
        return $this->container['redemptionReference'];
    }

    /**
     * Sets redemptionReference
     *
     * @param string $redemptionReference Optional redemption reference, can be used for staff name, username, POS ID, location ID, etc.
     *
     * @return $this
     */
    public function setRedemptionReference($redemptionReference)
    {
        $this->container['redemptionReference'] = $redemptionReference;

        return $this;
    }

    /**
     * Gets transactionReference
     *
     * @return string
     */
    public function getTransactionReference()
    {
        return $this->container['transactionReference'];
    }

    /**
     * Sets transactionReference
     *
     * @param string $transactionReference Optional transaction reference, can be used to consolidate baskets at a later stage via a manual process.
     *
     * @return $this
     */
    public function setTransactionReference($transactionReference)
    {
        $this->container['transactionReference'] = $transactionReference;

        return $this;
    }

    /**
     * Gets transactionAmount
     *
     * @return double
     */
    public function getTransactionAmount()
    {
        return $this->container['transactionAmount'];
    }

    /**
     * Sets transactionAmount
     *
     * @param double $transactionAmount Optional total transaction amount.
     *
     * @return $this
     */
    public function setTransactionAmount($transactionAmount)
    {
        $this->container['transactionAmount'] = $transactionAmount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
