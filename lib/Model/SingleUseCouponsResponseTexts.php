<?php
/**
 * SingleUseCouponsResponseTexts
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsResponseTexts Class Doc Comment
 *
 * @category Class
 * @description Customize success or error messages shown on the page or error dialog box.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsResponseTexts implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsResponseTexts';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'redeemConfirmationDialogBoxText' => 'string',
'localizedRedeemConfirmationDialogBoxText' => '\PkIo\Model\IoLocalizedString',
'cancelRedeemText' => 'string',
'localizedCancelRedeemText' => '\PkIo\Model\IoLocalizedString',
'afterRedeemText' => 'string',
'localizedAfterRedeemText' => '\PkIo\Model\IoLocalizedString',
'couponAlreadyRedeemedText' => 'string',
'localizedCouponAlreadyRedeemedText' => '\PkIo\Model\IoLocalizedString',
'offerExpiredText' => 'string',
'localizedOfferExpiredText' => '\PkIo\Model\IoLocalizedString',
'couponExpiredText' => 'string',
'localizedCouponExpiredText' => '\PkIo\Model\IoLocalizedString'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'redeemConfirmationDialogBoxText' => null,
'localizedRedeemConfirmationDialogBoxText' => null,
'cancelRedeemText' => null,
'localizedCancelRedeemText' => null,
'afterRedeemText' => null,
'localizedAfterRedeemText' => null,
'couponAlreadyRedeemedText' => null,
'localizedCouponAlreadyRedeemedText' => null,
'offerExpiredText' => null,
'localizedOfferExpiredText' => null,
'couponExpiredText' => null,
'localizedCouponExpiredText' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'redeemConfirmationDialogBoxText' => 'redeemConfirmationDialogBoxText',
'localizedRedeemConfirmationDialogBoxText' => 'localizedRedeemConfirmationDialogBoxText',
'cancelRedeemText' => 'cancelRedeemText',
'localizedCancelRedeemText' => 'localizedCancelRedeemText',
'afterRedeemText' => 'afterRedeemText',
'localizedAfterRedeemText' => 'localizedAfterRedeemText',
'couponAlreadyRedeemedText' => 'couponAlreadyRedeemedText',
'localizedCouponAlreadyRedeemedText' => 'localizedCouponAlreadyRedeemedText',
'offerExpiredText' => 'offerExpiredText',
'localizedOfferExpiredText' => 'localizedOfferExpiredText',
'couponExpiredText' => 'couponExpiredText',
'localizedCouponExpiredText' => 'localizedCouponExpiredText'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'redeemConfirmationDialogBoxText' => 'setRedeemConfirmationDialogBoxText',
'localizedRedeemConfirmationDialogBoxText' => 'setLocalizedRedeemConfirmationDialogBoxText',
'cancelRedeemText' => 'setCancelRedeemText',
'localizedCancelRedeemText' => 'setLocalizedCancelRedeemText',
'afterRedeemText' => 'setAfterRedeemText',
'localizedAfterRedeemText' => 'setLocalizedAfterRedeemText',
'couponAlreadyRedeemedText' => 'setCouponAlreadyRedeemedText',
'localizedCouponAlreadyRedeemedText' => 'setLocalizedCouponAlreadyRedeemedText',
'offerExpiredText' => 'setOfferExpiredText',
'localizedOfferExpiredText' => 'setLocalizedOfferExpiredText',
'couponExpiredText' => 'setCouponExpiredText',
'localizedCouponExpiredText' => 'setLocalizedCouponExpiredText'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'redeemConfirmationDialogBoxText' => 'getRedeemConfirmationDialogBoxText',
'localizedRedeemConfirmationDialogBoxText' => 'getLocalizedRedeemConfirmationDialogBoxText',
'cancelRedeemText' => 'getCancelRedeemText',
'localizedCancelRedeemText' => 'getLocalizedCancelRedeemText',
'afterRedeemText' => 'getAfterRedeemText',
'localizedAfterRedeemText' => 'getLocalizedAfterRedeemText',
'couponAlreadyRedeemedText' => 'getCouponAlreadyRedeemedText',
'localizedCouponAlreadyRedeemedText' => 'getLocalizedCouponAlreadyRedeemedText',
'offerExpiredText' => 'getOfferExpiredText',
'localizedOfferExpiredText' => 'getLocalizedOfferExpiredText',
'couponExpiredText' => 'getCouponExpiredText',
'localizedCouponExpiredText' => 'getLocalizedCouponExpiredText'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['redeemConfirmationDialogBoxText'] = isset($data['redeemConfirmationDialogBoxText']) ? $data['redeemConfirmationDialogBoxText'] : null;
        $this->container['localizedRedeemConfirmationDialogBoxText'] = isset($data['localizedRedeemConfirmationDialogBoxText']) ? $data['localizedRedeemConfirmationDialogBoxText'] : null;
        $this->container['cancelRedeemText'] = isset($data['cancelRedeemText']) ? $data['cancelRedeemText'] : null;
        $this->container['localizedCancelRedeemText'] = isset($data['localizedCancelRedeemText']) ? $data['localizedCancelRedeemText'] : null;
        $this->container['afterRedeemText'] = isset($data['afterRedeemText']) ? $data['afterRedeemText'] : null;
        $this->container['localizedAfterRedeemText'] = isset($data['localizedAfterRedeemText']) ? $data['localizedAfterRedeemText'] : null;
        $this->container['couponAlreadyRedeemedText'] = isset($data['couponAlreadyRedeemedText']) ? $data['couponAlreadyRedeemedText'] : null;
        $this->container['localizedCouponAlreadyRedeemedText'] = isset($data['localizedCouponAlreadyRedeemedText']) ? $data['localizedCouponAlreadyRedeemedText'] : null;
        $this->container['offerExpiredText'] = isset($data['offerExpiredText']) ? $data['offerExpiredText'] : null;
        $this->container['localizedOfferExpiredText'] = isset($data['localizedOfferExpiredText']) ? $data['localizedOfferExpiredText'] : null;
        $this->container['couponExpiredText'] = isset($data['couponExpiredText']) ? $data['couponExpiredText'] : null;
        $this->container['localizedCouponExpiredText'] = isset($data['localizedCouponExpiredText']) ? $data['localizedCouponExpiredText'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets redeemConfirmationDialogBoxText
     *
     * @return string
     */
    public function getRedeemConfirmationDialogBoxText()
    {
        return $this->container['redeemConfirmationDialogBoxText'];
    }

    /**
     * Sets redeemConfirmationDialogBoxText
     *
     * @param string $redeemConfirmationDialogBoxText To be shown before redemption page is rendered. The dialogue box will have \"Ok\" and \"Cancel\" bottons. If visitor clicks \"Ok\", coupon will be redeemed and the redemption page will render fixed code. This only applies to the redemption type REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED.
     *
     * @return $this
     */
    public function setRedeemConfirmationDialogBoxText($redeemConfirmationDialogBoxText)
    {
        $this->container['redeemConfirmationDialogBoxText'] = $redeemConfirmationDialogBoxText;

        return $this;
    }

    /**
     * Gets localizedRedeemConfirmationDialogBoxText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedRedeemConfirmationDialogBoxText()
    {
        return $this->container['localizedRedeemConfirmationDialogBoxText'];
    }

    /**
     * Sets localizedRedeemConfirmationDialogBoxText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedRedeemConfirmationDialogBoxText localizedRedeemConfirmationDialogBoxText
     *
     * @return $this
     */
    public function setLocalizedRedeemConfirmationDialogBoxText($localizedRedeemConfirmationDialogBoxText)
    {
        $this->container['localizedRedeemConfirmationDialogBoxText'] = $localizedRedeemConfirmationDialogBoxText;

        return $this;
    }

    /**
     * Gets cancelRedeemText
     *
     * @return string
     */
    public function getCancelRedeemText()
    {
        return $this->container['cancelRedeemText'];
    }

    /**
     * Sets cancelRedeemText
     *
     * @param string $cancelRedeemText To be shown when visitor clicks \"Cancel\" and reject to redeem now. This only applies to the redemption type REDEMPTION_TYPE_CUSTOMER_INITIATED_CODE_FIXED.
     *
     * @return $this
     */
    public function setCancelRedeemText($cancelRedeemText)
    {
        $this->container['cancelRedeemText'] = $cancelRedeemText;

        return $this;
    }

    /**
     * Gets localizedCancelRedeemText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedCancelRedeemText()
    {
        return $this->container['localizedCancelRedeemText'];
    }

    /**
     * Sets localizedCancelRedeemText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedCancelRedeemText localizedCancelRedeemText
     *
     * @return $this
     */
    public function setLocalizedCancelRedeemText($localizedCancelRedeemText)
    {
        $this->container['localizedCancelRedeemText'] = $localizedCancelRedeemText;

        return $this;
    }

    /**
     * Gets afterRedeemText
     *
     * @return string
     */
    public function getAfterRedeemText()
    {
        return $this->container['afterRedeemText'];
    }

    /**
     * Sets afterRedeemText
     *
     * @param string $afterRedeemText To be shown when coupon has been redeemed.
     *
     * @return $this
     */
    public function setAfterRedeemText($afterRedeemText)
    {
        $this->container['afterRedeemText'] = $afterRedeemText;

        return $this;
    }

    /**
     * Gets localizedAfterRedeemText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedAfterRedeemText()
    {
        return $this->container['localizedAfterRedeemText'];
    }

    /**
     * Sets localizedAfterRedeemText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedAfterRedeemText localizedAfterRedeemText
     *
     * @return $this
     */
    public function setLocalizedAfterRedeemText($localizedAfterRedeemText)
    {
        $this->container['localizedAfterRedeemText'] = $localizedAfterRedeemText;

        return $this;
    }

    /**
     * Gets couponAlreadyRedeemedText
     *
     * @return string
     */
    public function getCouponAlreadyRedeemedText()
    {
        return $this->container['couponAlreadyRedeemedText'];
    }

    /**
     * Sets couponAlreadyRedeemedText
     *
     * @param string $couponAlreadyRedeemedText To be shown when the coupon was already redeemed.
     *
     * @return $this
     */
    public function setCouponAlreadyRedeemedText($couponAlreadyRedeemedText)
    {
        $this->container['couponAlreadyRedeemedText'] = $couponAlreadyRedeemedText;

        return $this;
    }

    /**
     * Gets localizedCouponAlreadyRedeemedText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedCouponAlreadyRedeemedText()
    {
        return $this->container['localizedCouponAlreadyRedeemedText'];
    }

    /**
     * Sets localizedCouponAlreadyRedeemedText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedCouponAlreadyRedeemedText localizedCouponAlreadyRedeemedText
     *
     * @return $this
     */
    public function setLocalizedCouponAlreadyRedeemedText($localizedCouponAlreadyRedeemedText)
    {
        $this->container['localizedCouponAlreadyRedeemedText'] = $localizedCouponAlreadyRedeemedText;

        return $this;
    }

    /**
     * Gets offerExpiredText
     *
     * @return string
     */
    public function getOfferExpiredText()
    {
        return $this->container['offerExpiredText'];
    }

    /**
     * Sets offerExpiredText
     *
     * @param string $offerExpiredText To be shown when the offer period has ended.
     *
     * @return $this
     */
    public function setOfferExpiredText($offerExpiredText)
    {
        $this->container['offerExpiredText'] = $offerExpiredText;

        return $this;
    }

    /**
     * Gets localizedOfferExpiredText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedOfferExpiredText()
    {
        return $this->container['localizedOfferExpiredText'];
    }

    /**
     * Sets localizedOfferExpiredText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedOfferExpiredText localizedOfferExpiredText
     *
     * @return $this
     */
    public function setLocalizedOfferExpiredText($localizedOfferExpiredText)
    {
        $this->container['localizedOfferExpiredText'] = $localizedOfferExpiredText;

        return $this;
    }

    /**
     * Gets couponExpiredText
     *
     * @return string
     */
    public function getCouponExpiredText()
    {
        return $this->container['couponExpiredText'];
    }

    /**
     * Sets couponExpiredText
     *
     * @param string $couponExpiredText To be shown when the coupon expiry date / redemption end date has passed.
     *
     * @return $this
     */
    public function setCouponExpiredText($couponExpiredText)
    {
        $this->container['couponExpiredText'] = $couponExpiredText;

        return $this;
    }

    /**
     * Gets localizedCouponExpiredText
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedCouponExpiredText()
    {
        return $this->container['localizedCouponExpiredText'];
    }

    /**
     * Sets localizedCouponExpiredText
     *
     * @param \PkIo\Model\IoLocalizedString $localizedCouponExpiredText localizedCouponExpiredText
     *
     * @return $this
     */
    public function setLocalizedCouponExpiredText($localizedCouponExpiredText)
    {
        $this->container['localizedCouponExpiredText'] = $localizedCouponExpiredText;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
