<?php
/**
 * IoBarcodeType
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;
use \PkIo\ObjectSerializer;

/**
 * IoBarcodeType Class Doc Comment
 *
 * @category Class
 * @description Barcode type sets the type of barcode for the pass.   - QR: QR code can store 4 types of data: numeric, alphanumeric, byte/binary, and Kanji (Chinese characters).  - AZTEC: Aztec codes are commonly used by the transportation industry such as tickets and airline boarding passes.  - PDF417: 2D barcode which can store multiple data encodings. Not recommended for large payloads.  - CODE128: Supports any character of the ASCII 128 character set which can store highly diversified information. Suitable for older scanners that may not support 2D barcodes, however, some older scanners may also not be able to read from a phone screen, so requires proper testing before use.  - NONE: This does not set a barcode. If you set barcode type as none, no barcode will be shown on the pass.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class IoBarcodeType
{
    /**
     * Possible values of this enum
     */
    const BARCODE_TYPE_DO_NOT_USE = 'BARCODE_TYPE_DO_NOT_USE';
const QR = 'QR';
const AZTEC = 'AZTEC';
const PDF417 = 'PDF417';
const CODE128 = 'CODE128';
const NONE = 'NONE';
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::BARCODE_TYPE_DO_NOT_USE,
self::QR,
self::AZTEC,
self::PDF417,
self::CODE128,
self::NONE,        ];
    }
}
