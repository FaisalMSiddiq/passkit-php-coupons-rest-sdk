<?php
/**
 * SingleUseCouponsCouponCampaign
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsCouponCampaign Class Doc Comment
 *
 * @category Class
 * @description Holds the business logic &amp; distribution settings of the Coupon Campaign.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsCouponCampaign implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsCouponCampaign';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'name' => 'string',
'localizedName' => '\PkIo\Model\IoLocalizedString',
'status' => '\PkIo\Model\IoProjectStatus[]',
'passTypeIdentifier' => 'string',
'ianaTimezone' => 'string',
'created' => '\DateTime',
'updated' => '\DateTime'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'name' => null,
'localizedName' => null,
'status' => null,
'passTypeIdentifier' => null,
'ianaTimezone' => null,
'created' => 'date-time',
'updated' => 'date-time'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'name' => 'name',
'localizedName' => 'localizedName',
'status' => 'status',
'passTypeIdentifier' => 'passTypeIdentifier',
'ianaTimezone' => 'ianaTimezone',
'created' => 'created',
'updated' => 'updated'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'name' => 'setName',
'localizedName' => 'setLocalizedName',
'status' => 'setStatus',
'passTypeIdentifier' => 'setPassTypeIdentifier',
'ianaTimezone' => 'setIanaTimezone',
'created' => 'setCreated',
'updated' => 'setUpdated'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'name' => 'getName',
'localizedName' => 'getLocalizedName',
'status' => 'getStatus',
'passTypeIdentifier' => 'getPassTypeIdentifier',
'ianaTimezone' => 'getIanaTimezone',
'created' => 'getCreated',
'updated' => 'getUpdated'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['localizedName'] = isset($data['localizedName']) ? $data['localizedName'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['passTypeIdentifier'] = isset($data['passTypeIdentifier']) ? $data['passTypeIdentifier'] : null;
        $this->container['ianaTimezone'] = isset($data['ianaTimezone']) ? $data['ianaTimezone'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['status'] === null) {
            $invalidProperties[] = "'status' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id PassKit generated program id (22 characters).
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of the coupon campaign; used in the portal / API. Not shown to the end-customer.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets localizedName
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedName()
    {
        return $this->container['localizedName'];
    }

    /**
     * Sets localizedName
     *
     * @param \PkIo\Model\IoLocalizedString $localizedName localizedName
     *
     * @return $this
     */
    public function setLocalizedName($localizedName)
    {
        $this->container['localizedName'] = $localizedName;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \PkIo\Model\IoProjectStatus[]
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \PkIo\Model\IoProjectStatus[] $status The program status (bitmask of ProjectStatus). Defaults to io.ProjectStatus.PROJECT_ACTIVE_FOR_OBJECT_CREATION + io.ProjectStatus.PROJECT_DRAFT.
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets passTypeIdentifier
     *
     * @return string
     */
    public function getPassTypeIdentifier()
    {
        return $this->container['passTypeIdentifier'];
    }

    /**
     * Sets passTypeIdentifier
     *
     * @param string $passTypeIdentifier Leave empty for draft campaigns. Needs to be set for campaigns where status contains PROJECT_PUBLISHED.
     *
     * @return $this
     */
    public function setPassTypeIdentifier($passTypeIdentifier)
    {
        $this->container['passTypeIdentifier'] = $passTypeIdentifier;

        return $this;
    }

    /**
     * Gets ianaTimezone
     *
     * @return string
     */
    public function getIanaTimezone()
    {
        return $this->container['ianaTimezone'];
    }

    /**
     * Sets ianaTimezone
     *
     * @param string $ianaTimezone The campaign timezone.
     *
     * @return $this
     */
    public function setIanaTimezone($ianaTimezone)
    {
        $this->container['ianaTimezone'] = $ianaTimezone;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date the campaign was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The date the campaign updated.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
