<?php
/**
 * SingleUseCouponsCouponOffer
 *
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Model;

use \ArrayAccess;
use \PkIo\ObjectSerializer;

/**
 * SingleUseCouponsCouponOffer Class Doc Comment
 *
 * @category Class
 * @description Holds the offer details, redemption settings and before &amp; after-redeem template designs (Apple Wallet &amp; Google Pay designs) for the Coupon Offer.
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SingleUseCouponsCouponOffer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'single_use_couponsCouponOffer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
'offerTitle' => 'string',
'localizedOfferTitle' => '\PkIo\Model\IoLocalizedString',
'offerShortTitle' => 'string',
'localizedOfferShortTitle' => '\PkIo\Model\IoLocalizedString',
'offerDetails' => 'string',
'localizedOfferDetails' => '\PkIo\Model\IoLocalizedString',
'offerFinePrint' => 'string',
'localizedOfferFinePrint' => '\PkIo\Model\IoLocalizedString',
'beforeRedeemPassTemplateId' => 'string',
'afterRedeemPassTemplateId' => 'string',
'quota' => '\PkIo\Model\IoQuota',
'couponExpirySettings' => '\PkIo\Model\SingleUseCouponsCouponExpirySettings',
'redemptionSettings' => '\PkIo\Model\SingleUseCouponsRedemptionSettings',
'issueStartDate' => '\DateTime',
'issueEndDate' => '\DateTime',
'created' => '\DateTime',
'updated' => '\DateTime',
'campaignId' => 'string',
'distributionSettings' => '\PkIo\Model\IoDistributionSettings',
'shortCode' => 'string',
'ianaTimezone' => 'string',
'disabled' => 'bool'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => null,
'offerTitle' => null,
'localizedOfferTitle' => null,
'offerShortTitle' => null,
'localizedOfferShortTitle' => null,
'offerDetails' => null,
'localizedOfferDetails' => null,
'offerFinePrint' => null,
'localizedOfferFinePrint' => null,
'beforeRedeemPassTemplateId' => null,
'afterRedeemPassTemplateId' => null,
'quota' => null,
'couponExpirySettings' => null,
'redemptionSettings' => null,
'issueStartDate' => 'date-time',
'issueEndDate' => 'date-time',
'created' => 'date-time',
'updated' => 'date-time',
'campaignId' => null,
'distributionSettings' => null,
'shortCode' => null,
'ianaTimezone' => null,
'disabled' => 'boolean'    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
'offerTitle' => 'offerTitle',
'localizedOfferTitle' => 'localizedOfferTitle',
'offerShortTitle' => 'offerShortTitle',
'localizedOfferShortTitle' => 'localizedOfferShortTitle',
'offerDetails' => 'offerDetails',
'localizedOfferDetails' => 'localizedOfferDetails',
'offerFinePrint' => 'offerFinePrint',
'localizedOfferFinePrint' => 'localizedOfferFinePrint',
'beforeRedeemPassTemplateId' => 'beforeRedeemPassTemplateId',
'afterRedeemPassTemplateId' => 'afterRedeemPassTemplateId',
'quota' => 'quota',
'couponExpirySettings' => 'couponExpirySettings',
'redemptionSettings' => 'redemptionSettings',
'issueStartDate' => 'issueStartDate',
'issueEndDate' => 'issueEndDate',
'created' => 'created',
'updated' => 'updated',
'campaignId' => 'campaignId',
'distributionSettings' => 'distributionSettings',
'shortCode' => 'shortCode',
'ianaTimezone' => 'ianaTimezone',
'disabled' => 'disabled'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
'offerTitle' => 'setOfferTitle',
'localizedOfferTitle' => 'setLocalizedOfferTitle',
'offerShortTitle' => 'setOfferShortTitle',
'localizedOfferShortTitle' => 'setLocalizedOfferShortTitle',
'offerDetails' => 'setOfferDetails',
'localizedOfferDetails' => 'setLocalizedOfferDetails',
'offerFinePrint' => 'setOfferFinePrint',
'localizedOfferFinePrint' => 'setLocalizedOfferFinePrint',
'beforeRedeemPassTemplateId' => 'setBeforeRedeemPassTemplateId',
'afterRedeemPassTemplateId' => 'setAfterRedeemPassTemplateId',
'quota' => 'setQuota',
'couponExpirySettings' => 'setCouponExpirySettings',
'redemptionSettings' => 'setRedemptionSettings',
'issueStartDate' => 'setIssueStartDate',
'issueEndDate' => 'setIssueEndDate',
'created' => 'setCreated',
'updated' => 'setUpdated',
'campaignId' => 'setCampaignId',
'distributionSettings' => 'setDistributionSettings',
'shortCode' => 'setShortCode',
'ianaTimezone' => 'setIanaTimezone',
'disabled' => 'setDisabled'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
'offerTitle' => 'getOfferTitle',
'localizedOfferTitle' => 'getLocalizedOfferTitle',
'offerShortTitle' => 'getOfferShortTitle',
'localizedOfferShortTitle' => 'getLocalizedOfferShortTitle',
'offerDetails' => 'getOfferDetails',
'localizedOfferDetails' => 'getLocalizedOfferDetails',
'offerFinePrint' => 'getOfferFinePrint',
'localizedOfferFinePrint' => 'getLocalizedOfferFinePrint',
'beforeRedeemPassTemplateId' => 'getBeforeRedeemPassTemplateId',
'afterRedeemPassTemplateId' => 'getAfterRedeemPassTemplateId',
'quota' => 'getQuota',
'couponExpirySettings' => 'getCouponExpirySettings',
'redemptionSettings' => 'getRedemptionSettings',
'issueStartDate' => 'getIssueStartDate',
'issueEndDate' => 'getIssueEndDate',
'created' => 'getCreated',
'updated' => 'getUpdated',
'campaignId' => 'getCampaignId',
'distributionSettings' => 'getDistributionSettings',
'shortCode' => 'getShortCode',
'ianaTimezone' => 'getIanaTimezone',
'disabled' => 'getDisabled'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['offerTitle'] = isset($data['offerTitle']) ? $data['offerTitle'] : null;
        $this->container['localizedOfferTitle'] = isset($data['localizedOfferTitle']) ? $data['localizedOfferTitle'] : null;
        $this->container['offerShortTitle'] = isset($data['offerShortTitle']) ? $data['offerShortTitle'] : null;
        $this->container['localizedOfferShortTitle'] = isset($data['localizedOfferShortTitle']) ? $data['localizedOfferShortTitle'] : null;
        $this->container['offerDetails'] = isset($data['offerDetails']) ? $data['offerDetails'] : null;
        $this->container['localizedOfferDetails'] = isset($data['localizedOfferDetails']) ? $data['localizedOfferDetails'] : null;
        $this->container['offerFinePrint'] = isset($data['offerFinePrint']) ? $data['offerFinePrint'] : null;
        $this->container['localizedOfferFinePrint'] = isset($data['localizedOfferFinePrint']) ? $data['localizedOfferFinePrint'] : null;
        $this->container['beforeRedeemPassTemplateId'] = isset($data['beforeRedeemPassTemplateId']) ? $data['beforeRedeemPassTemplateId'] : null;
        $this->container['afterRedeemPassTemplateId'] = isset($data['afterRedeemPassTemplateId']) ? $data['afterRedeemPassTemplateId'] : null;
        $this->container['quota'] = isset($data['quota']) ? $data['quota'] : null;
        $this->container['couponExpirySettings'] = isset($data['couponExpirySettings']) ? $data['couponExpirySettings'] : null;
        $this->container['redemptionSettings'] = isset($data['redemptionSettings']) ? $data['redemptionSettings'] : null;
        $this->container['issueStartDate'] = isset($data['issueStartDate']) ? $data['issueStartDate'] : null;
        $this->container['issueEndDate'] = isset($data['issueEndDate']) ? $data['issueEndDate'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['campaignId'] = isset($data['campaignId']) ? $data['campaignId'] : null;
        $this->container['distributionSettings'] = isset($data['distributionSettings']) ? $data['distributionSettings'] : null;
        $this->container['shortCode'] = isset($data['shortCode']) ? $data['shortCode'] : null;
        $this->container['ianaTimezone'] = isset($data['ianaTimezone']) ? $data['ianaTimezone'] : null;
        $this->container['disabled'] = isset($data['disabled']) ? $data['disabled'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['offerTitle'] === null) {
            $invalidProperties[] = "'offerTitle' can't be null";
        }
        if ($this->container['offerDetails'] === null) {
            $invalidProperties[] = "'offerDetails' can't be null";
        }
        if ($this->container['beforeRedeemPassTemplateId'] === null) {
            $invalidProperties[] = "'beforeRedeemPassTemplateId' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id PassKit generated offer id (22 characters).
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets offerTitle
     *
     * @return string
     */
    public function getOfferTitle()
    {
        return $this->container['offerTitle'];
    }

    /**
     * Sets offerTitle
     *
     * @param string $offerTitle The offer title; will be shown on the enrolment page.
     *
     * @return $this
     */
    public function setOfferTitle($offerTitle)
    {
        $this->container['offerTitle'] = $offerTitle;

        return $this;
    }

    /**
     * Gets localizedOfferTitle
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedOfferTitle()
    {
        return $this->container['localizedOfferTitle'];
    }

    /**
     * Sets localizedOfferTitle
     *
     * @param \PkIo\Model\IoLocalizedString $localizedOfferTitle localizedOfferTitle
     *
     * @return $this
     */
    public function setLocalizedOfferTitle($localizedOfferTitle)
    {
        $this->container['localizedOfferTitle'] = $localizedOfferTitle;

        return $this;
    }

    /**
     * Gets offerShortTitle
     *
     * @return string
     */
    public function getOfferShortTitle()
    {
        return $this->container['offerShortTitle'];
    }

    /**
     * Sets offerShortTitle
     *
     * @param string $offerShortTitle The offer short title.
     *
     * @return $this
     */
    public function setOfferShortTitle($offerShortTitle)
    {
        $this->container['offerShortTitle'] = $offerShortTitle;

        return $this;
    }

    /**
     * Gets localizedOfferShortTitle
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedOfferShortTitle()
    {
        return $this->container['localizedOfferShortTitle'];
    }

    /**
     * Sets localizedOfferShortTitle
     *
     * @param \PkIo\Model\IoLocalizedString $localizedOfferShortTitle localizedOfferShortTitle
     *
     * @return $this
     */
    public function setLocalizedOfferShortTitle($localizedOfferShortTitle)
    {
        $this->container['localizedOfferShortTitle'] = $localizedOfferShortTitle;

        return $this;
    }

    /**
     * Gets offerDetails
     *
     * @return string
     */
    public function getOfferDetails()
    {
        return $this->container['offerDetails'];
    }

    /**
     * Sets offerDetails
     *
     * @param string $offerDetails The offer details; will be shown on the enrolment page.
     *
     * @return $this
     */
    public function setOfferDetails($offerDetails)
    {
        $this->container['offerDetails'] = $offerDetails;

        return $this;
    }

    /**
     * Gets localizedOfferDetails
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedOfferDetails()
    {
        return $this->container['localizedOfferDetails'];
    }

    /**
     * Sets localizedOfferDetails
     *
     * @param \PkIo\Model\IoLocalizedString $localizedOfferDetails localizedOfferDetails
     *
     * @return $this
     */
    public function setLocalizedOfferDetails($localizedOfferDetails)
    {
        $this->container['localizedOfferDetails'] = $localizedOfferDetails;

        return $this;
    }

    /**
     * Gets offerFinePrint
     *
     * @return string
     */
    public function getOfferFinePrint()
    {
        return $this->container['offerFinePrint'];
    }

    /**
     * Sets offerFinePrint
     *
     * @param string $offerFinePrint The offer fine print.
     *
     * @return $this
     */
    public function setOfferFinePrint($offerFinePrint)
    {
        $this->container['offerFinePrint'] = $offerFinePrint;

        return $this;
    }

    /**
     * Gets localizedOfferFinePrint
     *
     * @return \PkIo\Model\IoLocalizedString
     */
    public function getLocalizedOfferFinePrint()
    {
        return $this->container['localizedOfferFinePrint'];
    }

    /**
     * Sets localizedOfferFinePrint
     *
     * @param \PkIo\Model\IoLocalizedString $localizedOfferFinePrint localizedOfferFinePrint
     *
     * @return $this
     */
    public function setLocalizedOfferFinePrint($localizedOfferFinePrint)
    {
        $this->container['localizedOfferFinePrint'] = $localizedOfferFinePrint;

        return $this;
    }

    /**
     * Gets beforeRedeemPassTemplateId
     *
     * @return string
     */
    public function getBeforeRedeemPassTemplateId()
    {
        return $this->container['beforeRedeemPassTemplateId'];
    }

    /**
     * Sets beforeRedeemPassTemplateId
     *
     * @param string $beforeRedeemPassTemplateId The pass template ID that coupons will use when in unredeemed state. All coupons for the offer are issued in unredeemed state.
     *
     * @return $this
     */
    public function setBeforeRedeemPassTemplateId($beforeRedeemPassTemplateId)
    {
        $this->container['beforeRedeemPassTemplateId'] = $beforeRedeemPassTemplateId;

        return $this;
    }

    /**
     * Gets afterRedeemPassTemplateId
     *
     * @return string
     */
    public function getAfterRedeemPassTemplateId()
    {
        return $this->container['afterRedeemPassTemplateId'];
    }

    /**
     * Sets afterRedeemPassTemplateId
     *
     * @param string $afterRedeemPassTemplateId Optional pass template ID that coupons will use when switched to redeemed state.
     *
     * @return $this
     */
    public function setAfterRedeemPassTemplateId($afterRedeemPassTemplateId)
    {
        $this->container['afterRedeemPassTemplateId'] = $afterRedeemPassTemplateId;

        return $this;
    }

    /**
     * Gets quota
     *
     * @return \PkIo\Model\IoQuota
     */
    public function getQuota()
    {
        return $this->container['quota'];
    }

    /**
     * Sets quota
     *
     * @param \PkIo\Model\IoQuota $quota quota
     *
     * @return $this
     */
    public function setQuota($quota)
    {
        $this->container['quota'] = $quota;

        return $this;
    }

    /**
     * Gets couponExpirySettings
     *
     * @return \PkIo\Model\SingleUseCouponsCouponExpirySettings
     */
    public function getCouponExpirySettings()
    {
        return $this->container['couponExpirySettings'];
    }

    /**
     * Sets couponExpirySettings
     *
     * @param \PkIo\Model\SingleUseCouponsCouponExpirySettings $couponExpirySettings couponExpirySettings
     *
     * @return $this
     */
    public function setCouponExpirySettings($couponExpirySettings)
    {
        $this->container['couponExpirySettings'] = $couponExpirySettings;

        return $this;
    }

    /**
     * Gets redemptionSettings
     *
     * @return \PkIo\Model\SingleUseCouponsRedemptionSettings
     */
    public function getRedemptionSettings()
    {
        return $this->container['redemptionSettings'];
    }

    /**
     * Sets redemptionSettings
     *
     * @param \PkIo\Model\SingleUseCouponsRedemptionSettings $redemptionSettings redemptionSettings
     *
     * @return $this
     */
    public function setRedemptionSettings($redemptionSettings)
    {
        $this->container['redemptionSettings'] = $redemptionSettings;

        return $this;
    }

    /**
     * Gets issueStartDate
     *
     * @return \DateTime
     */
    public function getIssueStartDate()
    {
        return $this->container['issueStartDate'];
    }

    /**
     * Sets issueStartDate
     *
     * @param \DateTime $issueStartDate Optional date when coupons can start to be issued. Defaults to the campaign start date. Needs to be greater than / equal to the campaign start date. Needs to be less than / equal to the campaign end date.
     *
     * @return $this
     */
    public function setIssueStartDate($issueStartDate)
    {
        $this->container['issueStartDate'] = $issueStartDate;

        return $this;
    }

    /**
     * Gets issueEndDate
     *
     * @return \DateTime
     */
    public function getIssueEndDate()
    {
        return $this->container['issueEndDate'];
    }

    /**
     * Sets issueEndDate
     *
     * @param \DateTime $issueEndDate Optional date when coupons can no longer be issued. Defaults to the campaign end date. Needs to be less than / equal to the campaign end date.
     *
     * @return $this
     */
    public function setIssueEndDate($issueEndDate)
    {
        $this->container['issueEndDate'] = $issueEndDate;

        return $this;
    }

    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The date when the offer was created.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The date the offer was last updated.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets campaignId
     *
     * @return string
     */
    public function getCampaignId()
    {
        return $this->container['campaignId'];
    }

    /**
     * Sets campaignId
     *
     * @param string $campaignId The campaign id that the offer belongs to (1 campaign can have multiple offers). This field cannot be changed once an offer is linked to a campaign.
     *
     * @return $this
     */
    public function setCampaignId($campaignId)
    {
        $this->container['campaignId'] = $campaignId;

        return $this;
    }

    /**
     * Gets distributionSettings
     *
     * @return \PkIo\Model\IoDistributionSettings
     */
    public function getDistributionSettings()
    {
        return $this->container['distributionSettings'];
    }

    /**
     * Sets distributionSettings
     *
     * @param \PkIo\Model\IoDistributionSettings $distributionSettings distributionSettings
     *
     * @return $this
     */
    public function setDistributionSettings($distributionSettings)
    {
        $this->container['distributionSettings'] = $distributionSettings;

        return $this;
    }

    /**
     * Gets shortCode
     *
     * @return string
     */
    public function getShortCode()
    {
        return $this->container['shortCode'];
    }

    /**
     * Sets shortCode
     *
     * @param string $shortCode The offer shortcode generated by the system. If the campaign is public, then this shortcode can be used to generate the coupon-create URL.
     *
     * @return $this
     */
    public function setShortCode($shortCode)
    {
        $this->container['shortCode'] = $shortCode;

        return $this;
    }

    /**
     * Gets ianaTimezone
     *
     * @return string
     */
    public function getIanaTimezone()
    {
        return $this->container['ianaTimezone'];
    }

    /**
     * Sets ianaTimezone
     *
     * @param string $ianaTimezone The offer timezone.
     *
     * @return $this
     */
    public function setIanaTimezone($ianaTimezone)
    {
        $this->container['ianaTimezone'] = $ianaTimezone;

        return $this;
    }

    /**
     * Gets disabled
     *
     * @return bool
     */
    public function getDisabled()
    {
        return $this->container['disabled'];
    }

    /**
     * Sets disabled
     *
     * @param bool $disabled Can be used to temporarily disable the coupon (i.e. if you ran out of your promotion item, you can temporarily disable all live coupons, and activate them again later on when your item is in stock again).
     *
     * @return $this
     */
    public function setDisabled($disabled)
    {
        $this->container['disabled'] = $disabled;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
