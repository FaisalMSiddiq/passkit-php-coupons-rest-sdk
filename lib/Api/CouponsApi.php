<?php
/**
 * CouponsApi
 * PHP version 5
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * PassKit Single Use Coupon API
 *
 * This protocol is suit for cases where the user requires a clean and simple single use coupon for short term coupon campaigns in Apple Wallet and Google Pay.
 *
 * OpenAPI spec version: 0.1
 * Contact: support@passkit.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.19
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace PkIo\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use PkIo\ApiException;
use PkIo\Configuration;
use PkIo\HeaderSelector;
use PkIo\ObjectSerializer;

/**
 * CouponsApi Class Doc Comment
 *
 * @category Class
 * @package  PkIo
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CouponsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation countCouponsByCouponCampaign
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\IoCount
     */
    public function countCouponsByCouponCampaign($body, $couponCampaignId)
    {
        list($response) = $this->countCouponsByCouponCampaignWithHttpInfo($body, $couponCampaignId);
        return $response;
    }

    /**
     * Operation countCouponsByCouponCampaignWithHttpInfo
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\IoCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function countCouponsByCouponCampaignWithHttpInfo($body, $couponCampaignId)
    {
        $returnType = '\PkIo\Model\IoCount';
        $request = $this->countCouponsByCouponCampaignRequest($body, $couponCampaignId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\IoCount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countCouponsByCouponCampaignAsync
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countCouponsByCouponCampaignAsync($body, $couponCampaignId)
    {
        return $this->countCouponsByCouponCampaignAsyncWithHttpInfo($body, $couponCampaignId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countCouponsByCouponCampaignAsyncWithHttpInfo
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countCouponsByCouponCampaignAsyncWithHttpInfo($body, $couponCampaignId)
    {
        $returnType = '\PkIo\Model\IoCount';
        $request = $this->countCouponsByCouponCampaignRequest($body, $couponCampaignId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countCouponsByCouponCampaign'
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function countCouponsByCouponCampaignRequest($body, $couponCampaignId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling countCouponsByCouponCampaign'
            );
        }
        // verify the required parameter 'couponCampaignId' is set
        if ($couponCampaignId === null || (is_array($couponCampaignId) && count($couponCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCampaignId when calling countCouponsByCouponCampaign'
            );
        }

        $resourcePath = '/coupon/singleUse/coupons/count/{couponCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($couponCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCampaignId' . '}',
                ObjectSerializer::toPathValue($couponCampaignId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation countCouponsByCouponCampaignDeprecated
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\IoCount
     */
    public function countCouponsByCouponCampaignDeprecated($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        list($response) = $this->countCouponsByCouponCampaignDeprecatedWithHttpInfo($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc);
        return $response;
    }

    /**
     * Operation countCouponsByCouponCampaignDeprecatedWithHttpInfo
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\IoCount, HTTP status code, HTTP response headers (array of strings)
     */
    public function countCouponsByCouponCampaignDeprecatedWithHttpInfo($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        $returnType = '\PkIo\Model\IoCount';
        $request = $this->countCouponsByCouponCampaignDeprecatedRequest($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\IoCount',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation countCouponsByCouponCampaignDeprecatedAsync
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countCouponsByCouponCampaignDeprecatedAsync($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        return $this->countCouponsByCouponCampaignDeprecatedAsyncWithHttpInfo($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation countCouponsByCouponCampaignDeprecatedAsyncWithHttpInfo
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function countCouponsByCouponCampaignDeprecatedAsyncWithHttpInfo($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        $returnType = '\PkIo\Model\IoCount';
        $request = $this->countCouponsByCouponCampaignDeprecatedRequest($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'countCouponsByCouponCampaignDeprecated'
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function countCouponsByCouponCampaignDeprecatedRequest($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        // verify the required parameter 'couponCampaignId' is set
        if ($couponCampaignId === null || (is_array($couponCampaignId) && count($couponCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCampaignId when calling countCouponsByCouponCampaignDeprecated'
            );
        }

        $resourcePath = '/coupon/singleUse/coupons/count/{couponCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($paginationLimit !== null) {
            $queryParams['pagination.limit'] = ObjectSerializer::toQueryValue($paginationLimit);
        }
        // query params
        if ($paginationOffset !== null) {
            $queryParams['pagination.offset'] = ObjectSerializer::toQueryValue($paginationOffset);
        }
        // query params
        if (is_array($paginationFilterField)) {
            $paginationFilterField = ObjectSerializer::serializeCollection($paginationFilterField, 'multi', true);
        }
        if ($paginationFilterField !== null) {
            $queryParams['pagination.filterField'] = ObjectSerializer::toQueryValue($paginationFilterField);
        }
        // query params
        if (is_array($paginationFilterValue)) {
            $paginationFilterValue = ObjectSerializer::serializeCollection($paginationFilterValue, 'multi', true);
        }
        if ($paginationFilterValue !== null) {
            $queryParams['pagination.filterValue'] = ObjectSerializer::toQueryValue($paginationFilterValue);
        }
        // query params
        if (is_array($paginationFilterOperator)) {
            $paginationFilterOperator = ObjectSerializer::serializeCollection($paginationFilterOperator, 'multi', true);
        }
        if ($paginationFilterOperator !== null) {
            $queryParams['pagination.filterOperator'] = ObjectSerializer::toQueryValue($paginationFilterOperator);
        }
        // query params
        if ($paginationOrderBy !== null) {
            $queryParams['pagination.orderBy'] = ObjectSerializer::toQueryValue($paginationOrderBy);
        }
        // query params
        if ($paginationOrderAsc !== null) {
            $queryParams['pagination.orderAsc'] = ObjectSerializer::toQueryValue($paginationOrderAsc);
        }

        // path params
        if ($couponCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCampaignId' . '}',
                ObjectSerializer::toPathValue($couponCampaignId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCoupon
     *
     * Create Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\IoId
     */
    public function createCoupon($body)
    {
        list($response) = $this->createCouponWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation createCouponWithHttpInfo
     *
     * Create Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\IoId, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCouponWithHttpInfo($body)
    {
        $returnType = '\PkIo\Model\IoId';
        $request = $this->createCouponRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\IoId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCouponAsync
     *
     * Create Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCouponAsync($body)
    {
        return $this->createCouponAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCouponAsyncWithHttpInfo
     *
     * Create Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCouponAsyncWithHttpInfo($body)
    {
        $returnType = '\PkIo\Model\IoId';
        $request = $this->createCouponRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCoupon'
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createCouponRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling createCoupon'
            );
        }

        $resourcePath = '/coupon/singleUse/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponByExternalId
     *
     * Get Coupon by External ID
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  string $externalId External ID (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\SingleUseCouponsCoupon
     */
    public function getCouponByExternalId($couponCampaignId, $externalId)
    {
        list($response) = $this->getCouponByExternalIdWithHttpInfo($couponCampaignId, $externalId);
        return $response;
    }

    /**
     * Operation getCouponByExternalIdWithHttpInfo
     *
     * Get Coupon by External ID
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  string $externalId External ID (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\SingleUseCouponsCoupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponByExternalIdWithHttpInfo($couponCampaignId, $externalId)
    {
        $returnType = '\PkIo\Model\SingleUseCouponsCoupon';
        $request = $this->getCouponByExternalIdRequest($couponCampaignId, $externalId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\SingleUseCouponsCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponByExternalIdAsync
     *
     * Get Coupon by External ID
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  string $externalId External ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponByExternalIdAsync($couponCampaignId, $externalId)
    {
        return $this->getCouponByExternalIdAsyncWithHttpInfo($couponCampaignId, $externalId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponByExternalIdAsyncWithHttpInfo
     *
     * Get Coupon by External ID
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  string $externalId External ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponByExternalIdAsyncWithHttpInfo($couponCampaignId, $externalId)
    {
        $returnType = '\PkIo\Model\SingleUseCouponsCoupon';
        $request = $this->getCouponByExternalIdRequest($couponCampaignId, $externalId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponByExternalId'
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  string $externalId External ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponByExternalIdRequest($couponCampaignId, $externalId)
    {
        // verify the required parameter 'couponCampaignId' is set
        if ($couponCampaignId === null || (is_array($couponCampaignId) && count($couponCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCampaignId when calling getCouponByExternalId'
            );
        }
        // verify the required parameter 'externalId' is set
        if ($externalId === null || (is_array($externalId) && count($externalId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $externalId when calling getCouponByExternalId'
            );
        }

        $resourcePath = '/coupon/singleUse/coupon/externalId/{couponCampaignId}/{externalId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($couponCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCampaignId' . '}',
                ObjectSerializer::toPathValue($couponCampaignId),
                $resourcePath
            );
        }
        // path params
        if ($externalId !== null) {
            $resourcePath = str_replace(
                '{' . 'externalId' . '}',
                ObjectSerializer::toPathValue($externalId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getCouponById
     *
     * Get Coupon by ID
     *
     * @param  string $id The unique identifier to an object or record. (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\SingleUseCouponsCoupon
     */
    public function getCouponById($id)
    {
        list($response) = $this->getCouponByIdWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation getCouponByIdWithHttpInfo
     *
     * Get Coupon by ID
     *
     * @param  string $id The unique identifier to an object or record. (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\SingleUseCouponsCoupon, HTTP status code, HTTP response headers (array of strings)
     */
    public function getCouponByIdWithHttpInfo($id)
    {
        $returnType = '\PkIo\Model\SingleUseCouponsCoupon';
        $request = $this->getCouponByIdRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\SingleUseCouponsCoupon',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getCouponByIdAsync
     *
     * Get Coupon by ID
     *
     * @param  string $id The unique identifier to an object or record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponByIdAsync($id)
    {
        return $this->getCouponByIdAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getCouponByIdAsyncWithHttpInfo
     *
     * Get Coupon by ID
     *
     * @param  string $id The unique identifier to an object or record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getCouponByIdAsyncWithHttpInfo($id)
    {
        $returnType = '\PkIo\Model\SingleUseCouponsCoupon';
        $request = $this->getCouponByIdRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getCouponById'
     *
     * @param  string $id The unique identifier to an object or record. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getCouponByIdRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null || (is_array($id) && count($id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling getCouponById'
            );
        }

        $resourcePath = '/coupon/singleUse/coupon/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCouponsByCouponCampaign
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function listCouponsByCouponCampaign($body, $couponCampaignId)
    {
        list($response) = $this->listCouponsByCouponCampaignWithHttpInfo($body, $couponCampaignId);
        return $response;
    }

    /**
     * Operation listCouponsByCouponCampaignWithHttpInfo
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCouponsByCouponCampaignWithHttpInfo($body, $couponCampaignId)
    {
        $returnType = 'object';
        $request = $this->listCouponsByCouponCampaignRequest($body, $couponCampaignId);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCouponsByCouponCampaignAsync
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCouponsByCouponCampaignAsync($body, $couponCampaignId)
    {
        return $this->listCouponsByCouponCampaignAsyncWithHttpInfo($body, $couponCampaignId)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCouponsByCouponCampaignAsyncWithHttpInfo
     *
     * List Coupons
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCouponsByCouponCampaignAsyncWithHttpInfo($body, $couponCampaignId)
    {
        $returnType = 'object';
        $request = $this->listCouponsByCouponCampaignRequest($body, $couponCampaignId);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCouponsByCouponCampaign'
     *
     * @param  \PkIo\Model\SingleUseCouponsListRequest $body (required)
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCouponsByCouponCampaignRequest($body, $couponCampaignId)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling listCouponsByCouponCampaign'
            );
        }
        // verify the required parameter 'couponCampaignId' is set
        if ($couponCampaignId === null || (is_array($couponCampaignId) && count($couponCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCampaignId when calling listCouponsByCouponCampaign'
            );
        }

        $resourcePath = '/coupon/singleUse/coupons/list/{couponCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($couponCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCampaignId' . '}',
                ObjectSerializer::toPathValue($couponCampaignId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listCouponsByCouponCampaignDeprecated
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function listCouponsByCouponCampaignDeprecated($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        list($response) = $this->listCouponsByCouponCampaignDeprecatedWithHttpInfo($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc);
        return $response;
    }

    /**
     * Operation listCouponsByCouponCampaignDeprecatedWithHttpInfo
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function listCouponsByCouponCampaignDeprecatedWithHttpInfo($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        $returnType = 'object';
        $request = $this->listCouponsByCouponCampaignDeprecatedRequest($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listCouponsByCouponCampaignDeprecatedAsync
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCouponsByCouponCampaignDeprecatedAsync($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        return $this->listCouponsByCouponCampaignDeprecatedAsyncWithHttpInfo($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listCouponsByCouponCampaignDeprecatedAsyncWithHttpInfo
     *
     * List Coupons [DEPRECATED]
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listCouponsByCouponCampaignDeprecatedAsyncWithHttpInfo($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        $returnType = 'object';
        $request = $this->listCouponsByCouponCampaignDeprecatedRequest($couponCampaignId, $paginationLimit, $paginationOffset, $paginationFilterField, $paginationFilterValue, $paginationFilterOperator, $paginationOrderBy, $paginationOrderAsc);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listCouponsByCouponCampaignDeprecated'
     *
     * @param  string $couponCampaignId Coupon Campaign ID (required)
     * @param  int $paginationLimit Limit the number of records returned. If not specified, a default of 25 is used.  Enter -1 for all records. (optional)
     * @param  int $paginationOffset Allows you to offset the first record returned by the limit. (optional)
     * @param  string[] $paginationFilterField Array of column names to filter results by. (optional)
     * @param  string[] $paginationFilterValue Array of values to test against the filter fields. (optional)
     * @param  string[] $paginationFilterOperator will be whitelisted operators in io core. (optional)
     * @param  string $paginationOrderBy Field to order results by. (optional)
     * @param  bool $paginationOrderAsc Will return in ascending order if true, or descending order if false. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function listCouponsByCouponCampaignDeprecatedRequest($couponCampaignId, $paginationLimit = null, $paginationOffset = null, $paginationFilterField = null, $paginationFilterValue = null, $paginationFilterOperator = null, $paginationOrderBy = null, $paginationOrderAsc = null)
    {
        // verify the required parameter 'couponCampaignId' is set
        if ($couponCampaignId === null || (is_array($couponCampaignId) && count($couponCampaignId) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $couponCampaignId when calling listCouponsByCouponCampaignDeprecated'
            );
        }

        $resourcePath = '/coupon/singleUse/coupons/{couponCampaignId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($paginationLimit !== null) {
            $queryParams['pagination.limit'] = ObjectSerializer::toQueryValue($paginationLimit);
        }
        // query params
        if ($paginationOffset !== null) {
            $queryParams['pagination.offset'] = ObjectSerializer::toQueryValue($paginationOffset);
        }
        // query params
        if (is_array($paginationFilterField)) {
            $paginationFilterField = ObjectSerializer::serializeCollection($paginationFilterField, 'multi', true);
        }
        if ($paginationFilterField !== null) {
            $queryParams['pagination.filterField'] = ObjectSerializer::toQueryValue($paginationFilterField);
        }
        // query params
        if (is_array($paginationFilterValue)) {
            $paginationFilterValue = ObjectSerializer::serializeCollection($paginationFilterValue, 'multi', true);
        }
        if ($paginationFilterValue !== null) {
            $queryParams['pagination.filterValue'] = ObjectSerializer::toQueryValue($paginationFilterValue);
        }
        // query params
        if (is_array($paginationFilterOperator)) {
            $paginationFilterOperator = ObjectSerializer::serializeCollection($paginationFilterOperator, 'multi', true);
        }
        if ($paginationFilterOperator !== null) {
            $queryParams['pagination.filterOperator'] = ObjectSerializer::toQueryValue($paginationFilterOperator);
        }
        // query params
        if ($paginationOrderBy !== null) {
            $queryParams['pagination.orderBy'] = ObjectSerializer::toQueryValue($paginationOrderBy);
        }
        // query params
        if ($paginationOrderAsc !== null) {
            $queryParams['pagination.orderAsc'] = ObjectSerializer::toQueryValue($paginationOrderAsc);
        }

        // path params
        if ($couponCampaignId !== null) {
            $resourcePath = str_replace(
                '{' . 'couponCampaignId' . '}',
                ObjectSerializer::toPathValue($couponCampaignId),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation redeemCoupon
     *
     * Redeem Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\IoId
     */
    public function redeemCoupon($body)
    {
        list($response) = $this->redeemCouponWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation redeemCouponWithHttpInfo
     *
     * Redeem Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\IoId, HTTP status code, HTTP response headers (array of strings)
     */
    public function redeemCouponWithHttpInfo($body)
    {
        $returnType = '\PkIo\Model\IoId';
        $request = $this->redeemCouponRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\IoId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation redeemCouponAsync
     *
     * Redeem Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemCouponAsync($body)
    {
        return $this->redeemCouponAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation redeemCouponAsyncWithHttpInfo
     *
     * Redeem Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function redeemCouponAsyncWithHttpInfo($body)
    {
        $returnType = '\PkIo\Model\IoId';
        $request = $this->redeemCouponRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'redeemCoupon'
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function redeemCouponRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling redeemCoupon'
            );
        }

        $resourcePath = '/coupon/singleUse/coupon/redeem';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateCoupon
     *
     * Update Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \PkIo\Model\IoId
     */
    public function updateCoupon($body)
    {
        list($response) = $this->updateCouponWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation updateCouponWithHttpInfo
     *
     * Update Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \PkIo\Model\IoId, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateCouponWithHttpInfo($body)
    {
        $returnType = '\PkIo\Model\IoId';
        $request = $this->updateCouponRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\IoId',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateCouponAsync
     *
     * Update Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponAsync($body)
    {
        return $this->updateCouponAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateCouponAsyncWithHttpInfo
     *
     * Update Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateCouponAsyncWithHttpInfo($body)
    {
        $returnType = '\PkIo\Model\IoId';
        $request = $this->updateCouponRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateCoupon'
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateCouponRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling updateCoupon'
            );
        }

        $resourcePath = '/coupon/singleUse/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation voidCoupon
     *
     * Void Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function voidCoupon($body)
    {
        list($response) = $this->voidCouponWithHttpInfo($body);
        return $response;
    }

    /**
     * Operation voidCouponWithHttpInfo
     *
     * Void Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \PkIo\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function voidCouponWithHttpInfo($body)
    {
        $returnType = 'object';
        $request = $this->voidCouponRequest($body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if (!in_array($returnType, ['string','integer','bool'])) {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 500:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 503:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 0:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\PkIo\Model\RuntimeError',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation voidCouponAsync
     *
     * Void Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidCouponAsync($body)
    {
        return $this->voidCouponAsyncWithHttpInfo($body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation voidCouponAsyncWithHttpInfo
     *
     * Void Coupon
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function voidCouponAsyncWithHttpInfo($body)
    {
        $returnType = 'object';
        $request = $this->voidCouponRequest($body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'voidCoupon'
     *
     * @param  \PkIo\Model\SingleUseCouponsCoupon $body (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function voidCouponRequest($body)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling voidCoupon'
            );
        }

        $resourcePath = '/coupon/singleUse/coupon';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
